import React from 'react';
import PropTypes from 'prop-types';
import './texas-map-app.css';
import Tabletop from 'tabletop';
import MarkerClusterer from '@google/markerclusterer';

var markers =[];

class Map extends React.Component {

  constructor(props) {
    super(props)
    this.state = {
      fetchedData: false,
      fetchedMarkers: false,
      fetchedMap: false,
      data: [],
      map: null, 
      clusterer: null,
    }
  }

  getGoogleMaps() {
    // If we haven't already defined the promise, define it
    if (!this.googleMapsPromise) {
      this.googleMapsPromise = new Promise((resolve) => {
        // Add a global handler for when the API finishes loading
        window.resolveGoogleMapsPromise = () => {
          // Resolve the promise
          const google = window.google;
          resolve(google);

          // Tidy up
          delete window.resolveGoogleMapsPromise;
        };

        // Load the Google Maps API
        const API = 'AIzaSyDAh7M89BnID8kGVXBrNtxJfD-jjDDFRCg';
        var script = document.createElement("script");
        script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=resolveGoogleMapsPromise`;
        script.async = true;
        document.body.appendChild(script);
        //script.src = `https://cdn.rawgit.com/googlemaps/js-marker-clusterer/gh-pages/src/markerclusterer.js`;
        script.src = "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js";
        script.async = true; 
        document.body.appendChild(script);
      });
    }

    // Return a promise for the Google Maps API
    return this.googleMapsPromise;
  }

  componentWillMount() {
    this.getGoogleMaps();
  }

  componentDidMount() {
    Tabletop.init({
      key: '1-Efe9kHJNuxvoO4pz23ioAE3D_dbugnedqnahVuBMkk',
      callback: googleData => {
        console.log('google sheet data --->', googleData)
        this.setState({ data: googleData });
        this.setState({ fetchedData: true });
      },
      simpleSheet: true
    });
  }

  componentDidUpdate() {
    const { fetchedData, fetchedMarkers, fetchedMap, data, map, clusterer } = this.state;
    console.log('Update - Data', data);
    console.log('Update - Markers', markers);
    if(!fetchedMarkers && data.length) {
      this.getMapClusterer();
    } else if (!fetchedMap && markers.length) {
      console.log('Markers',markers);
      this.getMapClusterer();
    }
  }

  getMapMarkers() {
    var { fetchedData, fetchedMarkers, fetchedMap, data, map, clusterer } = this.state;
    console.log('Data to markers', data);
    const google = window.google;
    const geocoder = new google.maps.Geocoder()
    data.slice(1).map( row => {
      geocoder.geocode( { 'address': row.City}, function (results, status) {
        console.log('City', row.City);
        if (status == 'OK') {
          var marker = new google.maps.Marker({
            position: results[0].geometry.location,
            label: row.City
          });
          markers.push(marker);
          console.log('Markers', markers);
        }
      });
    });
    console.log('fetchedMarkers', true);
    this.setState({ fetchedMarkers: true });
    console.log('Final Markers', markers);
  }


  getMapClusterer() {
    var { fetchedData, fetchedMarkers, fetchedMap, data, map, clusterer } = this.state;
    this.setState({ fetchedMap: true });
    this.getGoogleMaps().then((google) => {
      var location = {lat: 30.2672, lng:-97.7431};
      var mapOptions = {
        zoom: 5, 
        center: location
      };
      const map = new google.maps.Map(document.getElementById('map'), mapOptions);
      console.log('Map', map);
      //this.setState({ map: map });

      const markerClusterer = new MarkerClusterer(map, markers, {
       imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'
      });
      console.log('MarkerClusterer', markerClusterer);
      //this.setState({ clusterer: markerClusterer });

      console.log('Data to markers', data);
      const geocoder = new google.maps.Geocoder()
      data.slice(1).map( row => {
        geocoder.geocode( { 'address': row.City}, function (results, status) {
          console.log('City', row.City);
          if (status == 'OK') {
            var marker = new google.maps.Marker({
              position: results[0].geometry.location,
              label: row.City
            });
            markerClusterer.addMarker(marker);
            console.log('MarkerClusterer', markerClusterer);
          }
        });
      });
    });
    this.setState({ fetchedMarkers: true });
  }

  render () {
    const { data, map, clusterer } = this.state;
    return (
      <div id="map-container">
        <h3>My Google Maps Demo</h3>
        <div id="map" className="map"></div>
      </div>
    );
  }
}

Map.propTypes = {
  db: PropTypes.shape({
    sheet1: PropTypes.arrayOf(PropTypes.object)
  })
};

export default Map;
